{"version":3,"sources":["components/RoundedView/RoundedView.tsx","components/Sidebar/SidebarMenuItem/SidebarMenuItem.tsx","components/Divider/Divider.tsx","components/Sidebar/Sidebar.tsx","Pages/Home/Content/HomePageContent.tsx","Pages/Home/HomePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RoundedView","children","className","props","cn","SidebarMenuItem","onClick","label","active","Divider","Sidebar","onClose","title","HomePageContent","onSidebarOpen","size","color","HomePage","useState","sidebarOpen","setSidebarOpen","handleSidebarOpen","useCallback","handleSidebarClose","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mYAUeA,G,MANK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAcC,EAA3B,+CAClB,uCAAKD,UAAWE,IAAG,eAAgBF,IAAgBC,GAChDF,KCOUI,G,MARS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,MAAZ,IAAmBC,cAAnB,gBACtB,4BACEN,UAAWE,IAAG,sBAAuB,CAAE,8BAA+BI,IACtEF,QAASA,GACRC,KCJUE,G,MAFC,kBAAM,yBAAKP,UAAU,cCqBtBQ,G,MAlBC,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,MAAZ,OACd,yBAAKV,UAAU,WACb,yBAAKA,UAAU,kBAAkBU,GAEjC,yBAAKV,UAAU,iBACb,kBAAC,EAAD,CAAiBI,QAASK,EAASJ,MAAM,QAAQC,QAAQ,IACzD,kBAAC,EAAD,CAAiBD,MAAM,cACvB,kBAAC,EAAD,CAAiBA,MAAM,eACvB,kBAAC,EAAD,CAAiBA,MAAM,iBAEzB,kBAAC,EAAD,MACA,yBAAKL,UAAU,iBACb,kBAAC,EAAD,CAAiBK,MAAM,iB,OCAdM,G,MAXS,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAH,OACtB,oCACE,yBAAKZ,UAAU,8BACb,4BAAQI,QAASQ,EAAeZ,UAAU,sCACxC,kBAAC,IAAD,CAAiBa,KAAM,GAAIC,MANJ,aAQzB,yBAAKd,UAAU,qCAAf,aCgBSe,G,MAtBE,WAAO,IAAD,EACiBC,oBAAS,GAD1B,mBACdC,EADc,KACDC,EADC,KAGfC,EAAoBC,uBAAY,WACpCF,GAAe,KACd,CAACA,IAEEG,EAAqBD,uBAAY,WACrCF,GAAe,KACd,CAACA,IAEJ,OACE,kBAAC,EAAD,CAAalB,UAAU,aACrB,kBAAC,EAAD,CAASS,QAASY,EAAoBX,MAAM,WAC5C,kBAAC,EAAD,CAAaV,UAAWE,IAAG,+BAAgC,CAAE,6CAA8Ce,KACzG,kBAAC,EAAD,CAAiBL,cAAeO,QCVzBG,MARf,WACE,OACE,yBAAKtB,UAAU,OACX,kBAAC,EAAD,QCKYuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.70205a2c.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport \"./RoundedView.css\"\n\nconst RoundedView = ({ children, className, ...props }: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>) => (\n  <div className={cn('rounded-view', className)} {...props}>\n    {children}\n  </div>\n);\n\nexport default RoundedView;","import React from 'react';\nimport cn from 'classnames';\nimport { IProps } from './interfaces';\nimport \"./SidebarMenuItem.css\";\n\nconst SidebarMenuItem = ({ onClick, label, active = false }: IProps) => (\n  <button\n    className={cn('sidebar__menu__item', { 'sidebar__menu__item--active': active })}\n    onClick={onClick}>\n    {label}\n  </button>\n);\n\nexport default SidebarMenuItem;","import React from 'react';\nimport \"./Divider.css\";\n\nconst Divider = () => <div className='divider' />\n\nexport default Divider;","import React from 'react';\nimport SidebarMenuItem from './SidebarMenuItem';\nimport Divider from '../Divider';\nimport { IProps } from './interfaces';\nimport \"./Sidebar.css\";\n\nconst Sidebar = ({ onClose, title }: IProps) => (\n  <div className='sidebar'>\n    <div className='sidebar__title'>{title}</div>\n\n    <div className='sidebar__menu'>\n      <SidebarMenuItem onClick={onClose} label=\"start\" active={true} />\n      <SidebarMenuItem label=\"your cart\" />\n      <SidebarMenuItem label=\"favourites\" />\n      <SidebarMenuItem label=\"your orders\" />\n    </div>\n    <Divider />\n    <div className='sidebar__menu'>\n      <SidebarMenuItem label=\"sign out\" />\n    </div>\n    \n  </div>\n)\n\nexport default Sidebar;","import React from 'react';\nimport { GiHamburgerMenu } from 'react-icons/gi';\nimport { IProps } from './interfaces';\nimport \"./HomePageContent.css\";\n\nconst sidebarToggleIconColor = \"#E8E5E5\";\n\nconst HomePageContent = ({ onSidebarOpen }: IProps) => (\n  <>\n    <div className='home-page__content__header'>\n      <button onClick={onSidebarOpen} className='home-page__content__header__toggle'>\n        <GiHamburgerMenu size={30} color={sidebarToggleIconColor} />\n      </button>\n      <div className='home-page__content__header__title'>start</div>\n    </div>\n  </>\n)\n\nexport default HomePageContent;\n\n","import React, { useState, useCallback } from 'react';\nimport cn from 'classnames';\nimport { Sidebar, RoundedView } from '../../components';\nimport HomePageContent from './Content';\nimport \"./HomePage.css\";\n\n\nconst HomePage = () => {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const handleSidebarOpen = useCallback(() => {\n    setSidebarOpen(true);\n  }, [setSidebarOpen]);\n\n  const handleSidebarClose = useCallback(() => {\n    setSidebarOpen(false);\n  }, [setSidebarOpen])\n\n  return (\n    <RoundedView className='home-page'>\n      <Sidebar onClose={handleSidebarClose} title=\"Viktor\" />\n      <RoundedView className={cn('home-page__content-container', { 'home-page__content-container--sidebar-open': sidebarOpen })}>\n        <HomePageContent onSidebarOpen={handleSidebarOpen} />\n      </RoundedView>\n    </RoundedView>\n  )\n\n}\n\nexport default HomePage;","import React from 'react';\nimport './App.css';\nimport { HomePage } from './Pages';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}